/*
 * Copyright (C) Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.google.lantern.server.persistence.dao;

import static com.google.common.base.Preconditions.checkNotNull;

<<<<<<< Updated upstream
import com.google.lantern.server.persistence.utils.ObjectifyUtils;
=======
import com.google.lantern.shared.dto.SearchCriteria;
>>>>>>> Stashed changes

import com.google.appengine.api.datastore.Cursor;
import com.google.appengine.api.datastore.QueryResultIterator;
import com.google.appengine.api.search.Document;
import com.google.appengine.api.search.SearchResult;
import com.google.common.base.Throwables;
import com.google.common.collect.Lists;
import com.google.lantern.server.persistence.search.FullTextSearchHelper;
import com.google.lantern.server.persistence.search.FullTextSearchResultWrapper;
import com.google.lantern.server.persistence.search.SearchIndexHelper;
import com.google.lantern.server.persistence.utils.QueryUtils;
import com.google.lantern.shared.exceptions.client.UserNotLoggedInException;
import com.google.lantern.shared.objectifyobjects.SearchTags;
import com.google.lantern.shared.objectifyobjects.SitesPage;
import com.google.lantern.shared.objectifyobjects.documents.DocumentEntity;
import com.google.lantern.shared.objectifyobjects.documents.DocumentSearchResultWrapper;
import com.googlecode.objectify.Key;
import com.googlecode.objectify.Objectify;
import com.googlecode.objectify.ObjectifyService;
import com.googlecode.objectify.Query;
import com.googlecode.objectify.util.DAOBase;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

/**
 * 
 * @author Arjun Satyapal
 */
public class DocumentDao extends DAOBase {
    private static final Logger logger = Logger.getLogger(DocumentDao.class.getName());

    static {
        ObjectifyService.register(SearchTags.class);
        ObjectifyService.register(SitesPage.class);
        ObjectifyService.register(DocumentEntity.class);
    }

    public static Long createNewDocument(final DocumentEntity newDocumentEntity)
            throws UserNotLoggedInException {
        Objectify ofy = ObjectifyUtils.getObjectifyService();
        ofy.put(newDocumentEntity);

        updateSearchIndex(newDocumentEntity);
        return checkNotNull(newDocumentEntity.getId());
    }

    public static void updateDocumentEntity(DocumentEntity docEntity, SitesPage updatedSitesPage)
            throws UserNotLoggedInException {
        checkNotNull(docEntity);
        checkNotNull(docEntity.getId());
        checkNotNull(updatedSitesPage);

        if (!docEntity.isModified(updatedSitesPage.getEtag())) {
            return;
        }
        logger.info("Etag changed. So updating things.");

        docEntity.setSitesPage(updatedSitesPage);

        Objectify ofy = ObjectifyUtils.getObjectifyService();
        ofy.put(docEntity);

        updateSearchIndex(docEntity);
    }

    protected static void updateSearchIndex(final DocumentEntity docEntity)
            throws UserNotLoggedInException {
        // Now making it available for search.
        Document aeSearchDoc = FullTextSearchHelper.toAppengineSearchDoc(docEntity);
        SearchIndexHelper.updateIndex(aeSearchDoc);
    }

    public static DocumentEntity getById(Long documentId) {
        Objectify ofy = ObjectifyUtils.getObjectifyService();
        return ofy.get(new Key<DocumentEntity>(DocumentEntity.class, documentId));
    }

    public static List<DocumentEntity> getDocumentsByEntityKeys(
            List<Key<DocumentEntity>> listOfDocumentKeys) {
        Objectify ofy = ObjectifyUtils.getObjectifyService();
        Map<Key<DocumentEntity>, DocumentEntity> documents = ofy.get(listOfDocumentKeys);
        return Lists.newArrayList(documents.values());
    }

    public static DocumentSearchResultWrapper getByCreatorEmail(final String cretaorEmail,
            final String cursorStr) {
        Objectify ofy = ObjectifyUtils.getObjectifyService();
        Query<DocumentEntity> query =
                ofy.query(DocumentEntity.class).filter("creatorEmail", cretaorEmail);

        if (cursorStr != null) {
            query.startCursor(Cursor.fromWebSafeString(cursorStr));
        }

        List<DocumentEntity> listOfDocuments = Lists.newArrayList();
        String newCursorStr = null;
        QueryResultIterator<DocumentEntity> iterator = query.iterator();
        while (iterator.hasNext()) {
            DocumentEntity course = iterator.next();
            listOfDocuments.add(course);

            if (listOfDocuments.size() >= QueryUtils.PAGE_SIZE) {
                newCursorStr = iterator.getCursor().toWebSafeString();
                break;
            }
        }

        return new DocumentSearchResultWrapper(newCursorStr, listOfDocuments);
    }

    @Deprecated
    public static DocumentSearchResultWrapper searchDocumentsByText(String cursor, String query,
            SearchCriteria searchCriteria) {
        try {
            FullTextSearchResultWrapper resultWrapper =
                    FullTextSearchHelper.search(cursor, query);
            List<Key<DocumentEntity>> listOfDocEntityKeys = Lists.newArrayList();
            for (SearchResult result : resultWrapper.getSearchResults()) {
                listOfDocEntityKeys.add(getDatastoreKeyFromSearchDocument(result.getDocument()));
            }

            return new DocumentSearchResultWrapper(resultWrapper.getCursor(),
                    getListOfDocuments(listOfDocEntityKeys));
        } catch (RuntimeException e) {
            logger.severe("Search request with query [" + query + "] failed due to : "
                    + Throwables.getStackTraceAsString(e));
        }

        return new DocumentSearchResultWrapper(null, Lists.<DocumentEntity> newArrayList());
    }

    public static DocumentSearchResultWrapper searchDocumentsBySearchCriteria(
            SearchCriteria searchCriteria) {
        try {
            // TODO(arjuns) : Add cursors.
            FullTextSearchResultWrapper resultWrapper =
                    FullTextSearchHelper.searchByCriteria(searchCriteria);

            List<Key<DocumentEntity>> listOfDocEntityKeys = Lists.newArrayList();
            for (SearchResult result : resultWrapper.getSearchResults()) {
                listOfDocEntityKeys.add(getDatastoreKeyFromSearchDocument(result.getDocument()));
            }

            return new DocumentSearchResultWrapper(resultWrapper.getCursor(),
                    getListOfDocuments(listOfDocEntityKeys));
        } catch (RuntimeException e) {
            logger.severe("Search request with query [" + searchCriteria.getSearchString()
                    + "] failed due to : " + Throwables.getStackTraceAsString(e));
        }

        return new DocumentSearchResultWrapper(null, Lists.<DocumentEntity> newArrayList());
    }

    protected static Key<DocumentEntity> getDatastoreKeyFromSearchDocument(Document doc) {
        Long datastoreId = Long.parseLong(doc.getId());
        return new Key<DocumentEntity>(DocumentEntity.class, datastoreId);
    }

    protected static List<DocumentEntity> getListOfDocuments(List<Key<DocumentEntity>> listOfKeys) {
        Objectify ofy = ObjectifyUtils.getObjectifyService();

        Map<Key<DocumentEntity>, DocumentEntity> map = ofy.get(listOfKeys);

        return Lists.newArrayList(map.values());
    }

    public static void deleteDocuments(Iterable<Key<DocumentEntity>> iterable) {
        Objectify ofy = ObjectifyUtils.getObjectifyService();

        ofy.delete(iterable);
    }

    public static List<DocumentEntity> searchDocumentByTags(SearchTags searchTags) {
        Objectify ofy = ObjectifyUtils.getObjectifyService();

        Query<DocumentEntity> query =
                ofy.query(DocumentEntity.class);

        if (searchTags.hasDomains()) {
            query.filter("searchTags.domains in ", searchTags.getDomains());
        }

        if (searchTags.hasUsStates()) {
            query.filter("searchTags.usStates in ", searchTags.getUsStates());
        }

        if (searchTags.hasGrades()) {
            query.filter("searchTags.grades in ", searchTags.getGrades());
        }

        // TODO(arjuns) : Add cursor support later.
        return query.list();
    }
}
