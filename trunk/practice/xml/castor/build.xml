<!--
    Copyright 2011 Google Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!-- Ant build file for the CNX web view. -->

<project name="webview" default="war">
    <property file="local.properties" />
    <property file="build.properties" />

    <!-- Pick up the Ant macros and taskdefs for App Engine -->
    <import file="${third_party}/appengine/appengine-1.5.2/config/user/ant-macros.xml" />

    <target name="war"
            depends="compile"
            description="Assemble the application directory">
        <mkdir dir="${war.dir}/WEB-INF" />
        <mkdir dir="${war.dir}/WEB-INF/classes" />
        <mkdir dir="${war.dir}/WEB-INF/lib" />
        <copy todir="${war.dir}/static">
            <fileset dir="${resourcedir}" />
        </copy>
        <copy todir="${war.dir}/WEB-INF">
            <fileset dir="src/WEB-INF">
                <include name="*.xml" />
            </fileset>
        </copy>
        <copy todir="${war.dir}/WEB-INF/lib">
            <fileset dir="${output.jars}" includes="*.jar" />
        </copy>
        <copy todir="${war.dir}/WEB-INF/classes">
            <fileset dir="${classdir}" includes="**/*.class" />
        </copy>
        <enhance_war war="${war.dir}" />
    </target>

    <property name="target_dir" value="${basedir}/${output.jars}" />
    <fileset id="depend_lib" dir="${output.jars}" includes="*.jar" />
    <fileset id="depend_test_lib" dir="${test.lib}" includes="*.jar" />

    <target name="compile" description="Compile the application servlet code">
        <mkdir dir="${classdir}" />
        <mkdir dir="${output.jars}" />
        <mkdir dir="${outputresourcesdir}" />
        <mkdir dir="${outputgenjavafiles}" />

        <ant antfile="appengine/build.xml"
             inheritAll="true"
             target="default"
             dir="${third_party}" />

        <ant antfile="castor/build.xml"
             inheritAll="true"
             target="default"
             dir="${third_party}" />

        <ant antfile="commons-logging/build.xml"
             inheritAll="true"
             target="default"
             dir="${third_party}" />

        <ant antfile="trang/build.xml"
             inheritAll="true"
             target="default"
             dir="${third_party}" />

        <ant antfile="jing/build.xml"
             inheritAll="true"
             target="default"
             dir="${third_party}" />

        <ant antfile="guava/build.xml"
             inheritAll="true"
             target="default"
             dir="${third_party}" />

        <ant antfile="xml-serializer/build.xml"
             inheritAll="true"
             target="default"
             dir="${third_party}" />
        
        
        <ant antfile="xalan/build.xml"
             inheritAll="true"
             target="default"
             dir="${third_party}" />

        <ant antfile="jaxb/build.xml"
                     inheritAll="true"
                     target="default"
                     dir="${third_party}" />


        <!-- Convert rng to xsd. -->
        <java jar="${trangjarpath}" fork="true">
            <arg line="${resourcedir}/resource-mapping.rng ${outputresourcesdir}/resource-mapping.xsd" />
        </java>

        <!-- Compiling xsd to java classes. -->
        <java classname="org.exolab.castor.builder.SourceGenerator" >
            <arg line="-f -i ${outputresourcesdir}/resource-mapping.xsd -package org.cnx.resourcemapping -dest ${outputgenjavafiles}" />
            <classpath>
                <resources refid="depend_lib" />
            </classpath>
        </java>


        <javac srcdir="${outputgenjavafiles}"
               destdir="${classdir}"
               includeantruntime="false"
               debug="on">
            <compilerarg line="${javac.flags}" />
            <classpath>
                <resources refid="depend_lib" />
            </classpath>
        </javac>

        <javac srcdir="src"
               destdir="${classdir}"
               includeantruntime="false"
               debug="on">
            <compilerarg line="${javac.flags}" />
            <classpath>
                <resources refid="depend_lib" />
            </classpath>
        </javac>
    </target>

    <target name="clean" description="Force a clean slate to rebuild">
        <delete dir="${buildir}" />
        <delete dir="${war.dir}" />
    </target>

    <target name="runserver" depends="war" description="Run the dev_appserver">
        <dev_appserver war="${war.dir}" port="${http.port}" />
    </target>

    <target name="dev_appserver" depends="runserver" />

    <target name="debug"
            depends="war"
            description="Launches dev_appserver with remote debugging enabled">
        <echo message="Launching dev_appserver on Web port ${http.port}, Java remote debug port ${debug.port}" />
        <dev_appserver war="${war.dir}" port="${http.port}">
            <options>
                <arg value="--jvm_flag=-Xdebug" />
                <arg value="--jvm_flag=-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=${debug.port}" />
            </options>
        </dev_appserver>
    </target>



    <target name="update"
            depends="war"
            description="Uploads the application, including indexes">
        <appcfg action="update" war="${war.dir}" />
    </target>

    <target name="update_indexes"
            depends="war"
            description="Uploads only the application's indexes">
        <appcfg action="update_indexes" war="${war.dir}" />
    </target>

    <target name="rollback"
            depends="war"
            description="Rolls back any in-progress application update">
        <appcfg action="rollback" war="${war.dir}" />
    </target>

    <target name="request_logs" description="Downloads the application's logs">
        <appcfg action="request_logs" war="${war.dir}">
            <options>
                <arg value="--num_days=${log.days}" />
            </options>
            <args>
                <arg value="${log.file}" />
            </args>
        </appcfg>
    </target>

    <target name="all"
            description="Refers to all the targets in this file other then test."
            depends="compile, war" />
</project>
